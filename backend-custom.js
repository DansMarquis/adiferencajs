/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/backend-custom.js":
/*!****************************************!*\
  !*** ./resources/js/backend-custom.js ***!
  \****************************************/
/***/ (() => {

eval("function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*\n * Version: 1.1.0\n * Template: Hope-Ui - Responsive Bootstrap 5 Admin Dashboard Template\n * Author: iqonic.design\n * Design and Developed by: iqonic.design\n * NOTE: This file contains the script for initialize & listener Template.\n */\n/*----------------------------------------------\nIndex Of Script\n------------------------------------------------\n------- Plugin Init --------\n:: Tooltip\n:: Popover\n:: Progress Bar\n:: NoUiSlider\n:: CopyToClipboard\n:: Vanila Datepicker\n:: SliderTab\n:: Data Tables\n:: Active Class for Pricing Table\n------ Functions --------\n:: Loader Init\n:: Resize Plugins\n:: Sidebar Toggle\n:: Back To Top\n------- Listners ---------\n:: DOMContentLoaded\n:: Window Resize\n------------------------------------------------\nIndex Of Script\n----------------------------------------------*/\n;\n(function () {\n  'use strict';\n\n  /*------------LoaderInit----------------*/\n  var loaderInit = function loaderInit() {\n    var loader = document.querySelector('.loader');\n    if (loader !== null) {\n      loader.classList.add('animate__animated', 'animate__fadeOut');\n      setTimeout(function () {\n        loader.classList.add('d-none');\n      }, 200);\n    }\n  };\n  if (_typeof($.fn.select2) !== ( true ? \"undefined\" : 0)) {\n    $('.select2').select2();\n    $('.select2-tag').select2({\n      tags: true\n    });\n  }\n  /*----------Sticky-Nav-----------*/\n  window.addEventListener('scroll', function () {\n    var yOffset = document.documentElement.scrollTop;\n    var navbar = document.querySelector('.navs-sticky');\n    if (navbar !== null) {\n      if (yOffset >= 100) {\n        navbar.classList.add('menu-sticky');\n      } else {\n        navbar.classList.remove('menu-sticky');\n      }\n    }\n  });\n  /*------------Popover--------------*/\n  var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n  if ((typeof bootstrap === \"undefined\" ? \"undefined\" : _typeof(bootstrap)) !== ( true ? \"undefined\" : 0)) {\n    popoverTriggerList.map(function (popoverTriggerEl) {\n      return new bootstrap.Popover(popoverTriggerEl);\n    });\n  }\n  /*-------------Tooltip--------------------*/\n  if ((typeof bootstrap === \"undefined\" ? \"undefined\" : _typeof(bootstrap)) !== ( true ? \"undefined\" : 0)) {\n    window.tooltipInit = function () {\n      var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n      tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n      });\n    };\n    tooltipInit();\n    var sidebarTooltipTriggerList = [].slice.call(document.querySelectorAll('[data-sidebar-toggle=\"tooltip\"]'));\n    sidebarTooltipTriggerList.map(function (tooltipTriggerEl) {\n      return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n  }\n  /*-------------Progress Bar------------------*/\n  var progressBarInit = function progressBarInit(elem) {\n    var currentValue = elem.getAttribute('aria-valuenow');\n    elem.style.width = '0%';\n    elem.style.transition = 'width 2s';\n    if ((typeof Waypoint === \"undefined\" ? \"undefined\" : _typeof(Waypoint)) !== ( true ? \"undefined\" : 0)) {\n      new Waypoint({\n        element: elem,\n        handler: function handler() {\n          setTimeout(function () {\n            elem.style.width = currentValue + '%';\n          }, 100);\n        },\n        offset: 'bottom-in-view'\n      });\n    }\n  };\n  var customProgressBar = document.querySelectorAll('[data-toggle=\"progress-bar\"]');\n  Array.from(customProgressBar, function (elem) {\n    progressBarInit(elem);\n  });\n  /*---------------noUiSlider-------------------*/\n  function createSlider(elem) {\n    return noUiSlider.create(elem, {\n      start: [50, 2000],\n      connect: true,\n      range: {\n        min: 0,\n        '10%': [50, 50],\n        max: 2000\n      }\n    });\n  }\n  var rangeSlider = document.querySelectorAll('.range-slider');\n  Array.from(rangeSlider, function (elem) {\n    if ((typeof noUiSlider === \"undefined\" ? \"undefined\" : _typeof(noUiSlider)) !== ( true ? \"undefined\" : 0)) {\n      if (elem.getAttribute('id') !== '' && elem.getAttribute('id') !== null) {\n        window[elem.getAttribute('id')] = createSlider(elem);\n      } else {\n        createSlider(elem);\n      }\n    }\n  });\n  var slider = document.querySelectorAll('.slider');\n  Array.from(slider, function (elem) {\n    if ((typeof noUiSlider === \"undefined\" ? \"undefined\" : _typeof(noUiSlider)) !== ( true ? \"undefined\" : 0)) {\n      noUiSlider.create(elem, {\n        start: 50,\n        connect: [true, false],\n        range: {\n          min: 0,\n          max: 100\n        }\n      });\n    }\n  });\n  /*------------Copy To Clipboard---------------*/\n  var copy = document.querySelectorAll('[data-toggle=\"copy\"]');\n  if (_typeof(copy) !== ( true ? \"undefined\" : 0)) {\n    Array.from(copy, function (elem) {\n      elem.addEventListener('click', function (e) {\n        var target = elem.getAttribute('data-copy-target');\n        var value = elem.getAttribute('data-copy-value');\n        var container = document.querySelector(target);\n        if (container !== undefined && container !== null) {\n          if (container.value !== undefined && container.value !== null) {\n            value = container.value;\n          } else {\n            value = container.innerHTML;\n          }\n        }\n        if (value !== null) {\n          var _elem = document.createElement('textarea');\n          document.querySelector('body').appendChild(_elem);\n          _elem.value = value;\n          _elem.select();\n          document.execCommand('copy');\n          _elem.remove();\n        }\n        elem.setAttribute('data-bs-original-title', 'Copied!');\n        var btn_tooltip = bootstrap.Tooltip.getInstance(elem);\n        btn_tooltip.show();\n        // reset the tooltip title\n        elem.setAttribute('data-bs-original-title', 'Copy');\n        setTimeout(function () {\n          btn_tooltip.hide();\n        }, 500);\n      });\n    });\n  }\n  /*------------Minus-plus--------------*/\n  var plusBtns = document.querySelectorAll('.iq-quantity-plus');\n  var minusBtns = document.querySelectorAll('.iq-quantity-minus');\n  var updateQtyBtn = function updateQtyBtn(elem, value) {\n    var oldValue = elem.closest('[data-qty=\"btn\"]').querySelector('[data-qty=\"input\"]').value;\n    var newValue = Number(oldValue) + Number(value);\n    if (newValue >= 1) {\n      elem.closest('[data-qty=\"btn\"]').querySelector('[data-qty=\"input\"]').value = newValue;\n    }\n  };\n  Array.from(plusBtns, function (elem) {\n    elem.addEventListener('click', function (e) {\n      updateQtyBtn(elem, 1);\n    });\n  });\n  Array.from(minusBtns, function (elem) {\n    elem.addEventListener('click', function (e) {\n      updateQtyBtn(elem, -1);\n    });\n  });\n  /*------------Flatpickr--------------*/\n  var date_flatpickr = document.querySelectorAll('.date_flatpicker');\n  Array.from(date_flatpickr, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        minDate: 'today',\n        dateFormat: 'Y-m-d'\n      });\n    }\n  });\n  /*----------Range Flatpickr--------------*/\n  var range_flatpicker = document.querySelectorAll('.range_flatpicker');\n  Array.from(range_flatpicker, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        mode: 'range',\n        minDate: 'today',\n        dateFormat: 'Y-m-d'\n      });\n    }\n  });\n  /*------------Wrap Flatpickr---------------*/\n  var wrap_flatpicker = document.querySelectorAll('.wrap_flatpicker');\n  Array.from(wrap_flatpicker, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        wrap: true,\n        minDate: 'today',\n        dateFormat: 'Y-m-d'\n      });\n    }\n  });\n  /*-------------Time Flatpickr---------------*/\n  var time_flatpickr = document.querySelectorAll('.time_flatpicker');\n  Array.from(time_flatpickr, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        enableTime: true,\n        noCalendar: true,\n        dateFormat: 'H:i'\n      });\n    }\n  });\n  /*-------------Inline Flatpickr-----------------*/\n  var inline_flatpickr = document.querySelectorAll('.inline_flatpickr');\n  Array.from(inline_flatpickr, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        inline: true,\n        minDate: 'today',\n        dateFormat: 'Y-m-d'\n      });\n    }\n  });\n\n  /*-------------CounterUp 2--------------*/\n  if (window.counterUp !== undefined) {\n    var counterUp = window.counterUp['default'];\n    var counterUp2 = document.querySelectorAll('.counter');\n    Array.from(counterUp2, function (el) {\n      if ((typeof Waypoint === \"undefined\" ? \"undefined\" : _typeof(Waypoint)) !== ( true ? \"undefined\" : 0)) {\n        var waypoint = new Waypoint({\n          element: el,\n          handler: function handler() {\n            counterUp(el, {\n              duration: 1000,\n              delay: 10\n            });\n            this.destroy();\n          },\n          offset: 'bottom-in-view'\n        });\n      }\n    });\n  }\n\n  /*----------------SliderTab------------------*/\n  Array.from(document.querySelectorAll('[data-toggle=\"slider-tab\"]'), function (elem) {\n    if ((typeof SliderTab === \"undefined\" ? \"undefined\" : _typeof(SliderTab)) !== ( true ? \"undefined\" : 0)) {\n      new SliderTab(elem);\n    }\n  });\n  var Scrollbar;\n  if (_typeof(Scrollbar) !== _typeof(null)) {\n    if (document.querySelectorAll('.data-scrollbar').length) {\n      Scrollbar = window.Scrollbar;\n      Scrollbar.init(document.querySelector('.data-scrollbar'), {\n        continuousScrolling: false,\n        alwaysShowTracks: false\n      });\n    }\n  }\n  /*-------------Data tables---------------*/\n  if ($.fn.DataTable) {\n    // Bootstrap DataTable\n    if ($('[data-toggle=\"data-table\"]').length) {\n      $('[data-toggle=\"data-table\"]').DataTable({\n        autoWidth: false,\n        dom: '<\"row align-items-center\"<\"col-md-6\" l><\"col-md-6\" f>><\"table-responsive my-3\" rt><\"row align-items-center\" <\"col-md-6\" i><\"col-md-6\" p>><\"clear\">'\n      });\n    }\n    // Column hidden datatable\n    if ($('[data-toggle=\"data-table-column-hidden\"]').length) {\n      var hiddentable = $('[data-toggle=\"data-table-column-hidden\"]').DataTable({});\n      $('a.toggle-vis').on('click', function (e) {\n        e.preventDefault();\n        var column = hiddentable.column($(this).attr('data-column'));\n        column.visible(!column.visible());\n      });\n    }\n    // Column filter datatable\n    if ($('[data-toggle=\"data-table-column-filter\"]').length) {\n      $('[data-toggle=\"data-table-column-filter\"] tfoot th').each(function () {\n        var title = $(this).attr('title');\n        $(this).html(\"<td><input type=\\\"text\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"\".concat(title, \"\\\" /></td>\"));\n      });\n      $('[data-toggle=\"data-table-column-filter\"]').DataTable({\n        initComplete: function initComplete() {\n          this.api().columns().every(function () {\n            var that = this;\n            $('input', this.footer()).on('keyup change clear', function () {\n              if (that.search() !== this.value) {\n                that.search(this.value).draw();\n              }\n            });\n          });\n        }\n      });\n    }\n    // Multilanguage datatable\n    if ($('[data-toggle=\"data-table-multi-language\"]').length) {\n      var languageSelect = function languageSelect() {\n        return Array.from(document.querySelector('#langSelector').options).filter(function (option) {\n          return option.selected;\n        }).map(function (option) {\n          return option.getAttribute('data-path');\n        });\n      };\n      var dataTableInit = function dataTableInit() {\n        $('[data-toggle=\"data-table-multi-language\"]').DataTable({\n          language: {\n            url: languageSelect()\n          }\n        });\n      };\n      dataTableInit();\n      document.querySelector('#langSelector').addEventListener('change', function (e) {\n        $('[data-toggle=\"data-table-multi-language\"]').dataTable().fnDestroy();\n        dataTableInit();\n      });\n    }\n  }\n\n  /*--------------Active Class for Pricing Table------------------------*/\n  var tableTh = document.querySelectorAll('#my-table tr th');\n  var tableTd = document.querySelectorAll('#my-table td');\n  if (tableTh !== null) {\n    Array.from(tableTh, function (elem) {\n      elem.addEventListener('click', function (e) {\n        Array.from(tableTh, function (th) {\n          if (th.children.length) {\n            th.children[0].classList.remove('active');\n          }\n        });\n        elem.children[0].classList.add('active');\n        Array.from(tableTd, function (td) {\n          return td.classList.remove('active');\n        });\n        var col = Array.prototype.indexOf.call(document.querySelector('#my-table tr').children, elem);\n        var tdIcons = document.querySelectorAll('#my-table tr td:nth-child(' + parseInt(col + 1) + ')');\n        Array.from(tdIcons, function (td) {\n          return td.classList.add('active');\n        });\n      });\n    });\n  }\n  /*------------Resize Plugins--------------*/\n  var resizePlugins = function resizePlugins() {\n    // For sidebar-mini & responsive\n    var tabs = document.querySelectorAll('.nav');\n    var sidebarResponsive = document.querySelector('[data-sidebar=\"responsive\"]');\n    if (window.innerWidth < 1025) {\n      Array.from(tabs, function (elem) {\n        if (!elem.classList.contains('flex-column') && elem.classList.contains('nav-tabs') && elem.classList.contains('nav-pills')) {\n          elem.classList.add('flex-column', 'on-resize');\n        }\n      });\n      if (sidebarResponsive !== null) {\n        if (!sidebarResponsive.classList.contains('sidebar-mini')) {\n          sidebarResponsive.classList.add('sidebar-mini', 'on-resize');\n        }\n      }\n    } else {\n      Array.from(tabs, function (elem) {\n        if (elem.classList.contains('on-resize')) {\n          elem.classList.remove('flex-column', 'on-resize');\n        }\n      });\n      if (sidebarResponsive !== null) {\n        if (sidebarResponsive.classList.contains('sidebar-mini') && sidebarResponsive.classList.contains('on-resize')) {\n          sidebarResponsive.classList.remove('sidebar-mini', 'on-resize');\n        }\n      }\n    }\n  };\n  /*-------------Sidebar Toggle-----------------*/\n  function updateSidebarType() {\n    if ((typeof IQSetting === \"undefined\" ? \"undefined\" : _typeof(IQSetting)) !== ( true ? \"undefined\" : 0)) {\n      var sidebarType = IQSetting.options.setting.sidebar_type.value;\n      var newTypes = sidebarType;\n      if (sidebarType.includes('sidebar-mini')) {\n        var indexOf = newTypes.findIndex(function (x) {\n          return x == 'sidebar-mini';\n        });\n        newTypes.splice(indexOf, 1);\n      } else {\n        newTypes.push('sidebar-mini');\n      }\n      IQSetting.sidebar_type(newTypes);\n    }\n  }\n  var sidebarToggle = function sidebarToggle(elem) {\n    elem.addEventListener('click', function (e) {\n      var sidebar = document.querySelector('.sidebar');\n      if (sidebar.classList.contains('sidebar-mini')) {\n        sidebar.classList.remove('sidebar-mini');\n        updateSidebarType();\n      } else {\n        sidebar.classList.add('sidebar-mini');\n        updateSidebarType();\n      }\n    });\n  };\n  var sidebarToggleBtn = document.querySelectorAll('[data-toggle=\"sidebar\"]');\n  Array.from(sidebarToggleBtn, function (sidebarBtn) {\n    sidebarToggle(sidebarBtn);\n  });\n\n  /*----------------Back To Top--------------------*/\n  var backToTop = document.getElementById('back-to-top');\n  if (backToTop !== null && backToTop !== undefined) {\n    document.getElementById('back-to-top').classList.add('animate__animated', 'animate__fadeOut');\n    window.addEventListener('scroll', function (e) {\n      if (document.documentElement.scrollTop > 250) {\n        document.getElementById('back-to-top').classList.remove('animate__fadeOut');\n        document.getElementById('back-to-top').classList.add('animate__fadeIn');\n      } else {\n        document.getElementById('back-to-top').classList.remove('animate__fadeIn');\n        document.getElementById('back-to-top').classList.add('animate__fadeOut');\n      }\n    });\n    // scroll body to 0px on click\n    document.querySelector('#top').addEventListener('click', function (e) {\n      e.preventDefault();\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    });\n  }\n  /*------------DOMContentLoaded--------------*/\n  document.addEventListener('DOMContentLoaded', function (event) {\n    resizePlugins();\n    loaderInit();\n  });\n  /*------------Window Resize------------------*/\n  window.addEventListener('resize', function (event) {\n    resizePlugins();\n  });\n  /*--------DropDown--------*/\n\n  function darken_screen(yesno) {\n    if (yesno == true) {\n      if (document.querySelector('.screen-darken') !== null) {\n        document.querySelector('.screen-darken').classList.add('active');\n      }\n    } else if (yesno == false) {\n      if (document.querySelector('.screen-darken') !== null) {\n        document.querySelector('.screen-darken').classList.remove('active');\n      }\n    }\n  }\n  function close_offcanvas() {\n    darken_screen(false);\n    if (document.querySelector('.mobile-offcanvas.show') !== null) {\n      document.querySelector('.mobile-offcanvas.show').classList.remove('show');\n      document.body.classList.remove('offcanvas-active');\n    }\n  }\n  function show_offcanvas(offcanvas_id) {\n    darken_screen(true);\n    if (document.getElementById(offcanvas_id) !== null) {\n      document.getElementById(offcanvas_id).classList.add('show');\n      document.body.classList.add('offcanvas-active');\n    }\n  }\n  document.addEventListener('DOMContentLoaded', function () {\n    document.querySelectorAll('[data-trigger]').forEach(function (everyelement) {\n      var offcanvas_id = everyelement.getAttribute('data-trigger');\n      everyelement.addEventListener('click', function (e) {\n        e.preventDefault();\n        show_offcanvas(offcanvas_id);\n      });\n    });\n    if (document.querySelectorAll('.btn-close')) {\n      document.querySelectorAll('.btn-close').forEach(function (everybutton) {\n        everybutton.addEventListener('click', function (e) {\n          close_offcanvas();\n        });\n      });\n    }\n    if (document.querySelector('.screen-darken')) {\n      document.querySelector('.screen-darken').addEventListener('click', function (event) {\n        close_offcanvas();\n      });\n    }\n  });\n  if (document.querySelector('#navbarSideCollapse')) {\n    document.querySelector('#navbarSideCollapse').addEventListener('click', function () {\n      document.querySelector('.offcanvas-collapse').classList.toggle('open');\n    });\n  }\n  var toggleelem = document.getElementById('navbarSupportedContent');\n  var offcanvasheader = document.getElementById('offcanvasBottom');\n  if (offcanvasheader !== null && offcanvasheader !== undefined) {\n    var bsOffcanvas = new bootstrap.Offcanvas(offcanvasheader);\n    toggleelem.addEventListener('show.bs.collapse', function () {\n      bsOffcanvas.show();\n      document.querySelector('.offcanvas-backdrop').addEventListener('click', function () {\n        var toggleInstace = bootstrap.Collapse.getInstance(toggleelem);\n        toggleInstace.hide();\n      });\n    });\n    toggleelem.addEventListener('hide.bs.collapse', function () {\n      bsOffcanvas.hide();\n    });\n  }\n  /*---------------Form Validation--------------------*/\n  // Example starter JavaScript for disabling form submissions if there are invalid fields\n  window.addEventListener('load', function () {\n    // Fetch all the forms we want to apply custom Bootstrap validation styles to\n    var forms = document.getElementsByClassName('needs-validation');\n    // Loop over them and prevent submission\n    var validation = Array.prototype.filter.call(forms, function (form) {\n      form.addEventListener('submit', function (event) {\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        form.classList.add('was-validated');\n      }, false);\n    });\n  }, false);\n  $(document).on('click', '.btn', function (e) {\n    $(this).trigger('blur');\n  });\n  // Snackbar Message\n  var snackbarMessage = function snackbarMessage() {\n    var PRIMARY_COLOR = window.getComputedStyle(document.querySelector('html')).getPropertyValue('--bs-success').trim();\n    var DANGER_COLOR = window.getComputedStyle(document.querySelector('html')).getPropertyValue('--bs-danger').trim();\n    var successSnackbar = function successSnackbar(message) {\n      Snackbar.show({\n        text: message,\n        pos: 'bottom-left',\n        actionTextColor: PRIMARY_COLOR,\n        duration: 2500\n      });\n    };\n    window.successSnackbar = successSnackbar;\n    var errorSnackbar = function errorSnackbar(message) {\n      Snackbar.show({\n        text: message,\n        pos: 'bottom-left',\n        actionTextColor: '#FFFFFF',\n        backgroundColor: DANGER_COLOR,\n        duration: 2500\n      });\n    };\n    window.errorSnackbar = errorSnackbar;\n  };\n  snackbarMessage();\n\n  /*\n    Exemples :\n    <a href=\"posts/2\" data-method=\"delete\" data-token=\"{{csrf_token()}}\">\n    - Or, request confirmation in the process -\n    <a href=\"posts/2\" data-method=\"delete\" data-token=\"{{csrf_token()}}\" data-confirm=\"Are you sure?\">\n    */\n\n  window.laravel = {\n    initialize: function initialize() {\n      this.methodLinks = $('[data-method]');\n      this.token = $('[data-token]');\n      this.registerEvents();\n      window.tooltipInit();\n      if ($('#quick-action-type').val() == '') {\n        $('#quick-action-apply').attr('disabled', true);\n      }\n    },\n    registerEvents: function registerEvents() {\n      this.methodLinks.on('click', this.handleMethod);\n    },\n    ajaxSubmitForm: function ajaxSubmitForm(e) {\n      var URL = $(this).attr('action');\n      var DATA = $(this).serialize();\n      var __this = $(this);\n      e.preventDefault();\n      $.ajax({\n        type: 'POST',\n        url: URL,\n        data: DATA,\n        dataType: 'json',\n        success: function success(res) {\n          if (res.status) {\n            // window.successSnackbar(res.message)\n            Swal.fire({\n              title: 'Deleted',\n              text: res.message,\n              icon: 'success',\n              showClass: {\n                popup: 'animate__animated animate__zoomIn'\n              },\n              hideClass: {\n                popup: 'animate__animated animate__zoomOut'\n              }\n            });\n            renderedDataTable.ajax.reload(null, false);\n            __this.remove();\n          } else {\n            if (res.message) {\n              Swal.fire({\n                title: 'Error',\n                text: res.message,\n                icon: 'error',\n                showClass: {\n                  popup: 'animate__animated animate__zoomIn'\n                },\n                hideClass: {\n                  popup: 'animate__animated animate__zoomOut'\n                }\n              });\n              __this.remove();\n            }\n          }\n        },\n        error: function error(err) {\n          var wrapper = document.createElement('div');\n          wrapper.innerHTML = err.responseText;\n          Swal.fire({\n            title: err.statusText,\n            text: wrapper.innerHTML,\n            icon: 'error',\n            showClass: {\n              popup: 'animate__animated animate__zoomIn'\n            },\n            hideClass: {\n              popup: 'animate__animated animate__zoomOut'\n            }\n          });\n          __this.remove();\n        }\n      });\n    },\n    handleMethod: function handleMethod(e) {\n      e.preventDefault();\n      var link = $(this);\n      var httpMethod = link.data('method').toUpperCase();\n      var form;\n\n      // If the data-method attribute is not PUT, PATCH or DELETE,\n      // Then we don't know what to do. Just ignore.\n      if ($.inArray(httpMethod, ['PUT', 'DELETE', 'PATCH']) === -1) {\n        return;\n      }\n\n      // Allow user to optionally provide data-confirm=\"Are you sure?\"\n      if (link.data('confirm')) {\n        laravel.verifyConfirm(link).then(function (res) {\n          if (res.isConfirmed) {\n            var formID = 'form-' + link.attr('id');\n            form = laravel.createForm(link, formID);\n            if (link.data('type') == 'ajax') {\n              $('#' + formID).on('submit', laravel.ajaxSubmitForm);\n            }\n            form.submit();\n          } else {\n            return false;\n          }\n        });\n      }\n    },\n    verifyConfirm: function () {\n      var _verifyConfirm = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(link) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Swal.fire({\n                title: link.data('confirm'),\n                icon: 'question',\n                // iconColor:'primary',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#858482',\n                confirmButtonText: 'Yes, delete it!',\n                cancelButtonText: 'Cancel',\n                showClass: {\n                  popup: 'animate__animated animate__zoomIn'\n                },\n                hideClass: {\n                  popup: 'animate__animated animate__zoomOut'\n                },\n                reverseButtons: true\n              }).then(function (result) {\n                return result;\n              });\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function verifyConfirm(_x) {\n        return _verifyConfirm.apply(this, arguments);\n      }\n      return verifyConfirm;\n    }(),\n    createForm: function createForm(link, formID) {\n      var form = $('<form>', {\n        method: 'POST',\n        id: formID,\n        action: link.attr('href')\n      });\n      var token = $('<input>', {\n        type: 'hidden',\n        name: '_token',\n        value: link.data('token')\n      });\n      var hiddenInput = $('<input>', {\n        name: '_method',\n        type: 'hidden',\n        value: link.data('method')\n      });\n      return form.append(token, hiddenInput).appendTo('body');\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQ3lFLE1BQU0sQ0FBQ3BELEtBQUssRUFBRW1ELFdBQVcsQ0FBQyxDQUFDRSxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ3pEO0VBQ0YsQ0FBQztBQUNILENBQUMsRUFBRSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2JhY2tlbmQtY3VzdG9tLmpzPzRiYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFZlcnNpb246IDEuMS4wXG4gKiBUZW1wbGF0ZTogSG9wZS1VaSAtIFJlc3BvbnNpdmUgQm9vdHN0cmFwIDUgQWRtaW4gRGFzaGJvYXJkIFRlbXBsYXRlXG4gKiBBdXRob3I6IGlxb25pYy5kZXNpZ25cbiAqIERlc2lnbiBhbmQgRGV2ZWxvcGVkIGJ5OiBpcW9uaWMuZGVzaWduXG4gKiBOT1RFOiBUaGlzIGZpbGUgY29udGFpbnMgdGhlIHNjcmlwdCBmb3IgaW5pdGlhbGl6ZSAmIGxpc3RlbmVyIFRlbXBsYXRlLlxuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkluZGV4IE9mIFNjcmlwdFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4tLS0tLS0tIFBsdWdpbiBJbml0IC0tLS0tLS0tXG46OiBUb29sdGlwXG46OiBQb3BvdmVyXG46OiBQcm9ncmVzcyBCYXJcbjo6IE5vVWlTbGlkZXJcbjo6IENvcHlUb0NsaXBib2FyZFxuOjogVmFuaWxhIERhdGVwaWNrZXJcbjo6IFNsaWRlclRhYlxuOjogRGF0YSBUYWJsZXNcbjo6IEFjdGl2ZSBDbGFzcyBmb3IgUHJpY2luZyBUYWJsZVxuLS0tLS0tIEZ1bmN0aW9ucyAtLS0tLS0tLVxuOjogTG9hZGVyIEluaXRcbjo6IFJlc2l6ZSBQbHVnaW5zXG46OiBTaWRlYmFyIFRvZ2dsZVxuOjogQmFjayBUbyBUb3Bcbi0tLS0tLS0gTGlzdG5lcnMgLS0tLS0tLS0tXG46OiBET01Db250ZW50TG9hZGVkXG46OiBXaW5kb3cgUmVzaXplXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkluZGV4IE9mIFNjcmlwdFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG47KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG4gIC8qLS0tLS0tLS0tLS0tTG9hZGVySW5pdC0tLS0tLS0tLS0tLS0tLS0qL1xuICBjb25zdCBsb2FkZXJJbml0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkZXInKVxuICAgIGlmIChsb2FkZXIgIT09IG51bGwpIHtcbiAgICAgIGxvYWRlci5jbGFzc0xpc3QuYWRkKCdhbmltYXRlX19hbmltYXRlZCcsICdhbmltYXRlX19mYWRlT3V0JylcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsb2FkZXIuY2xhc3NMaXN0LmFkZCgnZC1ub25lJylcbiAgICAgIH0sIDIwMClcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mICQuZm4uc2VsZWN0MiAhPT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgICQoJy5zZWxlY3QyJykuc2VsZWN0MigpXG4gICAgJCgnLnNlbGVjdDItdGFnJykuc2VsZWN0Mih7XG4gICAgICB0YWdzOiB0cnVlXG4gICAgfSlcbiAgfVxuICAvKi0tLS0tLS0tLS1TdGlja3ktTmF2LS0tLS0tLS0tLS0qL1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCB5T2Zmc2V0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgIGxldCBuYXZiYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2cy1zdGlja3knKVxuICAgIGlmIChuYXZiYXIgIT09IG51bGwpIHtcbiAgICAgIGlmICh5T2Zmc2V0ID49IDEwMCkge1xuICAgICAgICBuYXZiYXIuY2xhc3NMaXN0LmFkZCgnbWVudS1zdGlja3knKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmF2YmFyLmNsYXNzTGlzdC5yZW1vdmUoJ21lbnUtc3RpY2t5JylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIC8qLS0tLS0tLS0tLS0tUG9wb3Zlci0tLS0tLS0tLS0tLS0tKi9cbiAgY29uc3QgcG9wb3ZlclRyaWdnZXJMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1icy10b2dnbGU9XCJwb3BvdmVyXCJdJykpXG4gIGlmICh0eXBlb2YgYm9vdHN0cmFwICE9PSB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgcG9wb3ZlclRyaWdnZXJMaXN0Lm1hcChmdW5jdGlvbiAocG9wb3ZlclRyaWdnZXJFbCkge1xuICAgICAgcmV0dXJuIG5ldyBib290c3RyYXAuUG9wb3Zlcihwb3BvdmVyVHJpZ2dlckVsKVxuICAgIH0pXG4gIH1cbiAgLyotLS0tLS0tLS0tLS0tVG9vbHRpcC0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgaWYgKHR5cGVvZiBib290c3RyYXAgIT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICB3aW5kb3cudG9vbHRpcEluaXQgPSAoKSA9PiB7XG4gICAgICBjb25zdCB0b29sdGlwVHJpZ2dlckxpc3QgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIl0nKSlcbiAgICAgIHRvb2x0aXBUcmlnZ2VyTGlzdC5tYXAoZnVuY3Rpb24gKHRvb2x0aXBUcmlnZ2VyRWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBib290c3RyYXAuVG9vbHRpcCh0b29sdGlwVHJpZ2dlckVsKVxuICAgICAgfSlcbiAgICB9XG4gICAgdG9vbHRpcEluaXQoKVxuXG4gICAgY29uc3Qgc2lkZWJhclRvb2x0aXBUcmlnZ2VyTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc2lkZWJhci10b2dnbGU9XCJ0b29sdGlwXCJdJykpXG4gICAgc2lkZWJhclRvb2x0aXBUcmlnZ2VyTGlzdC5tYXAoZnVuY3Rpb24gKHRvb2x0aXBUcmlnZ2VyRWwpIHtcbiAgICAgIHJldHVybiBuZXcgYm9vdHN0cmFwLlRvb2x0aXAodG9vbHRpcFRyaWdnZXJFbClcbiAgICB9KVxuICB9XG4gIC8qLS0tLS0tLS0tLS0tLVByb2dyZXNzIEJhci0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIGNvbnN0IHByb2dyZXNzQmFySW5pdCA9IChlbGVtKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnKVxuICAgIGVsZW0uc3R5bGUud2lkdGggPSAnMCUnXG4gICAgZWxlbS5zdHlsZS50cmFuc2l0aW9uID0gJ3dpZHRoIDJzJ1xuICAgIGlmICh0eXBlb2YgV2F5cG9pbnQgIT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgIG5ldyBXYXlwb2ludCh7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW0sXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVsZW0uc3R5bGUud2lkdGggPSBjdXJyZW50VmFsdWUgKyAnJSdcbiAgICAgICAgICB9LCAxMDApXG4gICAgICAgIH0sXG4gICAgICAgIG9mZnNldDogJ2JvdHRvbS1pbi12aWV3J1xuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgY29uc3QgY3VzdG9tUHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGU9XCJwcm9ncmVzcy1iYXJcIl0nKVxuICBBcnJheS5mcm9tKGN1c3RvbVByb2dyZXNzQmFyLCAoZWxlbSkgPT4ge1xuICAgIHByb2dyZXNzQmFySW5pdChlbGVtKVxuICB9KVxuICAvKi0tLS0tLS0tLS0tLS0tLW5vVWlTbGlkZXItLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgZnVuY3Rpb24gY3JlYXRlU2xpZGVyKGVsZW0pIHtcbiAgICByZXR1cm4gbm9VaVNsaWRlci5jcmVhdGUoZWxlbSwge1xuICAgICAgc3RhcnQ6IFs1MCwgMjAwMF0sXG4gICAgICBjb25uZWN0OiB0cnVlLFxuICAgICAgcmFuZ2U6IHtcbiAgICAgICAgbWluOiAwLFxuICAgICAgICAnMTAlJzogWzUwLCA1MF0sXG4gICAgICAgIG1heDogMjAwMFxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgY29uc3QgcmFuZ2VTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmFuZ2Utc2xpZGVyJylcbiAgQXJyYXkuZnJvbShyYW5nZVNsaWRlciwgKGVsZW0pID0+IHtcbiAgICBpZiAodHlwZW9mIG5vVWlTbGlkZXIgIT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChlbGVtLmdldEF0dHJpYnV0ZSgnaWQnKSAhPT0gJycgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJykgIT09IG51bGwpIHtcbiAgICAgICAgd2luZG93W2VsZW0uZ2V0QXR0cmlidXRlKCdpZCcpXSA9IGNyZWF0ZVNsaWRlcihlbGVtKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlU2xpZGVyKGVsZW0pXG4gICAgICB9XG4gICAgfVxuICB9KVxuICBjb25zdCBzbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyJylcbiAgQXJyYXkuZnJvbShzbGlkZXIsIChlbGVtKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBub1VpU2xpZGVyICE9PSB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgICBub1VpU2xpZGVyLmNyZWF0ZShlbGVtLCB7XG4gICAgICAgIHN0YXJ0OiA1MCxcbiAgICAgICAgY29ubmVjdDogW3RydWUsIGZhbHNlXSxcbiAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgbWF4OiAxMDBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0pXG4gIC8qLS0tLS0tLS0tLS0tQ29weSBUbyBDbGlwYm9hcmQtLS0tLS0tLS0tLS0tLS0qL1xuICBjb25zdCBjb3B5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdG9nZ2xlPVwiY29weVwiXScpXG4gIGlmICh0eXBlb2YgY29weSAhPT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgIEFycmF5LmZyb20oY29weSwgKGVsZW0pID0+IHtcbiAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1jb3B5LXRhcmdldCcpXG4gICAgICAgIGxldCB2YWx1ZSA9IGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWNvcHktdmFsdWUnKVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldClcbiAgICAgICAgaWYgKGNvbnRhaW5lciAhPT0gdW5kZWZpbmVkICYmIGNvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChjb250YWluZXIudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBjb250YWluZXIudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29udGFpbmVyLnZhbHVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29udGFpbmVyLmlubmVySFRNTFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKVxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChlbGVtKVxuICAgICAgICAgIGVsZW0udmFsdWUgPSB2YWx1ZVxuICAgICAgICAgIGVsZW0uc2VsZWN0KClcbiAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpXG4gICAgICAgICAgZWxlbS5yZW1vdmUoKVxuICAgICAgICB9XG4gICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJywgJ0NvcGllZCEnKVxuICAgICAgICBsZXQgYnRuX3Rvb2x0aXAgPSBib290c3RyYXAuVG9vbHRpcC5nZXRJbnN0YW5jZShlbGVtKVxuICAgICAgICBidG5fdG9vbHRpcC5zaG93KClcbiAgICAgICAgLy8gcmVzZXQgdGhlIHRvb2x0aXAgdGl0bGVcbiAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnLCAnQ29weScpXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGJ0bl90b29sdGlwLmhpZGUoKVxuICAgICAgICB9LCA1MDApXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgLyotLS0tLS0tLS0tLS1NaW51cy1wbHVzLS0tLS0tLS0tLS0tLS0qL1xuICBjb25zdCBwbHVzQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pcS1xdWFudGl0eS1wbHVzJylcbiAgY29uc3QgbWludXNCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlxLXF1YW50aXR5LW1pbnVzJylcbiAgY29uc3QgdXBkYXRlUXR5QnRuID0gKGVsZW0sIHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSBlbGVtLmNsb3Nlc3QoJ1tkYXRhLXF0eT1cImJ0blwiXScpLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXF0eT1cImlucHV0XCJdJykudmFsdWVcbiAgICBjb25zdCBuZXdWYWx1ZSA9IE51bWJlcihvbGRWYWx1ZSkgKyBOdW1iZXIodmFsdWUpXG4gICAgaWYgKG5ld1ZhbHVlID49IDEpIHtcbiAgICAgIGVsZW0uY2xvc2VzdCgnW2RhdGEtcXR5PVwiYnRuXCJdJykucXVlcnlTZWxlY3RvcignW2RhdGEtcXR5PVwiaW5wdXRcIl0nKS52YWx1ZSA9IG5ld1ZhbHVlXG4gICAgfVxuICB9XG4gIEFycmF5LmZyb20ocGx1c0J0bnMsIChlbGVtKSA9PiB7XG4gICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICB1cGRhdGVRdHlCdG4oZWxlbSwgMSlcbiAgICB9KVxuICB9KVxuICBBcnJheS5mcm9tKG1pbnVzQnRucywgKGVsZW0pID0+IHtcbiAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIHVwZGF0ZVF0eUJ0bihlbGVtLCAtMSlcbiAgICB9KVxuICB9KVxuICAvKi0tLS0tLS0tLS0tLUZsYXRwaWNrci0tLS0tLS0tLS0tLS0tKi9cbiAgY29uc3QgZGF0ZV9mbGF0cGlja3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGF0ZV9mbGF0cGlja2VyJylcbiAgQXJyYXkuZnJvbShkYXRlX2ZsYXRwaWNrciwgKGVsZW0pID0+IHtcbiAgICBpZiAodHlwZW9mIGZsYXRwaWNrciAhPT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgICAgZmxhdHBpY2tyKGVsZW0sIHtcbiAgICAgICAgbWluRGF0ZTogJ3RvZGF5JyxcbiAgICAgICAgZGF0ZUZvcm1hdDogJ1ktbS1kJ1xuICAgICAgfSlcbiAgICB9XG4gIH0pXG4gIC8qLS0tLS0tLS0tLVJhbmdlIEZsYXRwaWNrci0tLS0tLS0tLS0tLS0tKi9cbiAgY29uc3QgcmFuZ2VfZmxhdHBpY2tlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yYW5nZV9mbGF0cGlja2VyJylcbiAgQXJyYXkuZnJvbShyYW5nZV9mbGF0cGlja2VyLCAoZWxlbSkgPT4ge1xuICAgIGlmICh0eXBlb2YgZmxhdHBpY2tyICE9PSB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgICBmbGF0cGlja3IoZWxlbSwge1xuICAgICAgICBtb2RlOiAncmFuZ2UnLFxuICAgICAgICBtaW5EYXRlOiAndG9kYXknLFxuICAgICAgICBkYXRlRm9ybWF0OiAnWS1tLWQnXG4gICAgICB9KVxuICAgIH1cbiAgfSlcbiAgLyotLS0tLS0tLS0tLS1XcmFwIEZsYXRwaWNrci0tLS0tLS0tLS0tLS0tLSovXG4gIGNvbnN0IHdyYXBfZmxhdHBpY2tlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy53cmFwX2ZsYXRwaWNrZXInKVxuICBBcnJheS5mcm9tKHdyYXBfZmxhdHBpY2tlciwgKGVsZW0pID0+IHtcbiAgICBpZiAodHlwZW9mIGZsYXRwaWNrciAhPT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgICAgZmxhdHBpY2tyKGVsZW0sIHtcbiAgICAgICAgd3JhcDogdHJ1ZSxcbiAgICAgICAgbWluRGF0ZTogJ3RvZGF5JyxcbiAgICAgICAgZGF0ZUZvcm1hdDogJ1ktbS1kJ1xuICAgICAgfSlcbiAgICB9XG4gIH0pXG4gIC8qLS0tLS0tLS0tLS0tLVRpbWUgRmxhdHBpY2tyLS0tLS0tLS0tLS0tLS0tKi9cbiAgY29uc3QgdGltZV9mbGF0cGlja3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGltZV9mbGF0cGlja2VyJylcbiAgQXJyYXkuZnJvbSh0aW1lX2ZsYXRwaWNrciwgKGVsZW0pID0+IHtcbiAgICBpZiAodHlwZW9mIGZsYXRwaWNrciAhPT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgICAgZmxhdHBpY2tyKGVsZW0sIHtcbiAgICAgICAgZW5hYmxlVGltZTogdHJ1ZSxcbiAgICAgICAgbm9DYWxlbmRhcjogdHJ1ZSxcbiAgICAgICAgZGF0ZUZvcm1hdDogJ0g6aSdcbiAgICAgIH0pXG4gICAgfVxuICB9KVxuICAvKi0tLS0tLS0tLS0tLS1JbmxpbmUgRmxhdHBpY2tyLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBjb25zdCBpbmxpbmVfZmxhdHBpY2tyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlubGluZV9mbGF0cGlja3InKVxuICBBcnJheS5mcm9tKGlubGluZV9mbGF0cGlja3IsIChlbGVtKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBmbGF0cGlja3IgIT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgIGZsYXRwaWNrcihlbGVtLCB7XG4gICAgICAgIGlubGluZTogdHJ1ZSxcbiAgICAgICAgbWluRGF0ZTogJ3RvZGF5JyxcbiAgICAgICAgZGF0ZUZvcm1hdDogJ1ktbS1kJ1xuICAgICAgfSlcbiAgICB9XG4gIH0pXG5cbiAgLyotLS0tLS0tLS0tLS0tQ291bnRlclVwIDItLS0tLS0tLS0tLS0tLSovXG4gIGlmICh3aW5kb3cuY291bnRlclVwICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjb3VudGVyVXAgPSB3aW5kb3cuY291bnRlclVwWydkZWZhdWx0J11cbiAgICBjb25zdCBjb3VudGVyVXAyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvdW50ZXInKVxuICAgIEFycmF5LmZyb20oY291bnRlclVwMiwgKGVsKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIFdheXBvaW50ICE9PSB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHdheXBvaW50ID0gbmV3IFdheXBvaW50KHtcbiAgICAgICAgICBlbGVtZW50OiBlbCxcbiAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb3VudGVyVXAoZWwsIHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgICAgICAgIGRlbGF5OiAxMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvZmZzZXQ6ICdib3R0b20taW4tdmlldydcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tU2xpZGVyVGFiLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGU9XCJzbGlkZXItdGFiXCJdJyksIChlbGVtKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBTbGlkZXJUYWIgIT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgIG5ldyBTbGlkZXJUYWIoZWxlbSlcbiAgICB9XG4gIH0pXG4gIGxldCBTY3JvbGxiYXJcbiAgaWYgKHR5cGVvZiBTY3JvbGxiYXIgIT09IHR5cGVvZiBudWxsKSB7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kYXRhLXNjcm9sbGJhcicpLmxlbmd0aCkge1xuICAgICAgU2Nyb2xsYmFyID0gd2luZG93LlNjcm9sbGJhclxuICAgICAgU2Nyb2xsYmFyLmluaXQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGEtc2Nyb2xsYmFyJyksIHtcbiAgICAgICAgY29udGludW91c1Njcm9sbGluZzogZmFsc2UsXG4gICAgICAgIGFsd2F5c1Nob3dUcmFja3M6IGZhbHNlXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICAvKi0tLS0tLS0tLS0tLS1EYXRhIHRhYmxlcy0tLS0tLS0tLS0tLS0tLSovXG4gIGlmICgkLmZuLkRhdGFUYWJsZSkge1xuICAgIC8vIEJvb3RzdHJhcCBEYXRhVGFibGVcbiAgICBpZiAoJCgnW2RhdGEtdG9nZ2xlPVwiZGF0YS10YWJsZVwiXScpLmxlbmd0aCkge1xuICAgICAgJCgnW2RhdGEtdG9nZ2xlPVwiZGF0YS10YWJsZVwiXScpLkRhdGFUYWJsZSh7XG4gICAgICAgIGF1dG9XaWR0aDogZmFsc2UsXG4gICAgICAgIGRvbTogJzxcInJvdyBhbGlnbi1pdGVtcy1jZW50ZXJcIjxcImNvbC1tZC02XCIgbD48XCJjb2wtbWQtNlwiIGY+PjxcInRhYmxlLXJlc3BvbnNpdmUgbXktM1wiIHJ0PjxcInJvdyBhbGlnbi1pdGVtcy1jZW50ZXJcIiA8XCJjb2wtbWQtNlwiIGk+PFwiY29sLW1kLTZcIiBwPj48XCJjbGVhclwiPidcbiAgICAgIH0pXG4gICAgfVxuICAgIC8vIENvbHVtbiBoaWRkZW4gZGF0YXRhYmxlXG4gICAgaWYgKCQoJ1tkYXRhLXRvZ2dsZT1cImRhdGEtdGFibGUtY29sdW1uLWhpZGRlblwiXScpLmxlbmd0aCkge1xuICAgICAgdmFyIGhpZGRlbnRhYmxlID0gJCgnW2RhdGEtdG9nZ2xlPVwiZGF0YS10YWJsZS1jb2x1bW4taGlkZGVuXCJdJykuRGF0YVRhYmxlKHt9KVxuICAgICAgJCgnYS50b2dnbGUtdmlzJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IGhpZGRlbnRhYmxlLmNvbHVtbigkKHRoaXMpLmF0dHIoJ2RhdGEtY29sdW1uJykpXG4gICAgICAgIGNvbHVtbi52aXNpYmxlKCFjb2x1bW4udmlzaWJsZSgpKVxuICAgICAgfSlcbiAgICB9XG4gICAgLy8gQ29sdW1uIGZpbHRlciBkYXRhdGFibGVcbiAgICBpZiAoJCgnW2RhdGEtdG9nZ2xlPVwiZGF0YS10YWJsZS1jb2x1bW4tZmlsdGVyXCJdJykubGVuZ3RoKSB7XG4gICAgICAkKCdbZGF0YS10b2dnbGU9XCJkYXRhLXRhYmxlLWNvbHVtbi1maWx0ZXJcIl0gdGZvb3QgdGgnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSAkKHRoaXMpLmF0dHIoJ3RpdGxlJylcbiAgICAgICAgJCh0aGlzKS5odG1sKGA8dGQ+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLXNtXCIgcGxhY2Vob2xkZXI9XCIke3RpdGxlfVwiIC8+PC90ZD5gKVxuICAgICAgfSlcbiAgICAgICQoJ1tkYXRhLXRvZ2dsZT1cImRhdGEtdGFibGUtY29sdW1uLWZpbHRlclwiXScpLkRhdGFUYWJsZSh7XG4gICAgICAgIGluaXRDb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuYXBpKClcbiAgICAgICAgICAgIC5jb2x1bW5zKClcbiAgICAgICAgICAgIC5ldmVyeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpc1xuXG4gICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5mb290ZXIoKSkub24oJ2tleXVwIGNoYW5nZSBjbGVhcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhhdC5zZWFyY2goKSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdGhhdC5zZWFyY2godGhpcy52YWx1ZSkuZHJhdygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgLy8gTXVsdGlsYW5ndWFnZSBkYXRhdGFibGVcbiAgICBpZiAoJCgnW2RhdGEtdG9nZ2xlPVwiZGF0YS10YWJsZS1tdWx0aS1sYW5ndWFnZVwiXScpLmxlbmd0aCkge1xuICAgICAgZnVuY3Rpb24gbGFuZ3VhZ2VTZWxlY3QoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsYW5nU2VsZWN0b3InKS5vcHRpb25zKVxuICAgICAgICAgIC5maWx0ZXIoKG9wdGlvbikgPT4gb3B0aW9uLnNlbGVjdGVkKVxuICAgICAgICAgIC5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLmdldEF0dHJpYnV0ZSgnZGF0YS1wYXRoJykpXG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBkYXRhVGFibGVJbml0KCkge1xuICAgICAgICAkKCdbZGF0YS10b2dnbGU9XCJkYXRhLXRhYmxlLW11bHRpLWxhbmd1YWdlXCJdJykuRGF0YVRhYmxlKHtcbiAgICAgICAgICBsYW5ndWFnZToge1xuICAgICAgICAgICAgdXJsOiBsYW5ndWFnZVNlbGVjdCgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZGF0YVRhYmxlSW5pdCgpXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGFuZ1NlbGVjdG9yJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgJCgnW2RhdGEtdG9nZ2xlPVwiZGF0YS10YWJsZS1tdWx0aS1sYW5ndWFnZVwiXScpLmRhdGFUYWJsZSgpLmZuRGVzdHJveSgpXG4gICAgICAgIGRhdGFUYWJsZUluaXQoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tQWN0aXZlIENsYXNzIGZvciBQcmljaW5nIFRhYmxlLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgY29uc3QgdGFibGVUaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNteS10YWJsZSB0ciB0aCcpXG4gIGNvbnN0IHRhYmxlVGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbXktdGFibGUgdGQnKVxuICBpZiAodGFibGVUaCAhPT0gbnVsbCkge1xuICAgIEFycmF5LmZyb20odGFibGVUaCwgKGVsZW0pID0+IHtcbiAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBBcnJheS5mcm9tKHRhYmxlVGgsICh0aCkgPT4ge1xuICAgICAgICAgIGlmICh0aC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoLmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBlbGVtLmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgIEFycmF5LmZyb20odGFibGVUZCwgKHRkKSA9PiB0ZC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSlcbiAgICAgICAgY29uc3QgY29sID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXktdGFibGUgdHInKS5jaGlsZHJlbiwgZWxlbSlcbiAgICAgICAgY29uc3QgdGRJY29ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNteS10YWJsZSB0ciB0ZDpudGgtY2hpbGQoJyArIHBhcnNlSW50KGNvbCArIDEpICsgJyknKVxuICAgICAgICBBcnJheS5mcm9tKHRkSWNvbnMsICh0ZCkgPT4gdGQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJykpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgLyotLS0tLS0tLS0tLS1SZXNpemUgUGx1Z2lucy0tLS0tLS0tLS0tLS0tKi9cbiAgY29uc3QgcmVzaXplUGx1Z2lucyA9ICgpID0+IHtcbiAgICAvLyBGb3Igc2lkZWJhci1taW5pICYgcmVzcG9uc2l2ZVxuICAgIGNvbnN0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2JylcbiAgICBjb25zdCBzaWRlYmFyUmVzcG9uc2l2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXNpZGViYXI9XCJyZXNwb25zaXZlXCJdJylcbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCAxMDI1KSB7XG4gICAgICBBcnJheS5mcm9tKHRhYnMsIChlbGVtKSA9PiB7XG4gICAgICAgIGlmICghZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2ZsZXgtY29sdW1uJykgJiYgZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoJ25hdi10YWJzJykgJiYgZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoJ25hdi1waWxscycpKSB7XG4gICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdmbGV4LWNvbHVtbicsICdvbi1yZXNpemUnKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYgKHNpZGViYXJSZXNwb25zaXZlICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghc2lkZWJhclJlc3BvbnNpdmUuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaWRlYmFyLW1pbmknKSkge1xuICAgICAgICAgIHNpZGViYXJSZXNwb25zaXZlLmNsYXNzTGlzdC5hZGQoJ3NpZGViYXItbWluaScsICdvbi1yZXNpemUnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIEFycmF5LmZyb20odGFicywgKGVsZW0pID0+IHtcbiAgICAgICAgaWYgKGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdvbi1yZXNpemUnKSkge1xuICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnZmxleC1jb2x1bW4nLCAnb24tcmVzaXplJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGlmIChzaWRlYmFyUmVzcG9uc2l2ZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc2lkZWJhclJlc3BvbnNpdmUuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaWRlYmFyLW1pbmknKSAmJiBzaWRlYmFyUmVzcG9uc2l2ZS5jbGFzc0xpc3QuY29udGFpbnMoJ29uLXJlc2l6ZScpKSB7XG4gICAgICAgICAgc2lkZWJhclJlc3BvbnNpdmUuY2xhc3NMaXN0LnJlbW92ZSgnc2lkZWJhci1taW5pJywgJ29uLXJlc2l6ZScpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyotLS0tLS0tLS0tLS0tU2lkZWJhciBUb2dnbGUtLS0tLS0tLS0tLS0tLS0tLSovXG4gIGZ1bmN0aW9uIHVwZGF0ZVNpZGViYXJUeXBlKCkge1xuICAgIGlmICh0eXBlb2YgSVFTZXR0aW5nICE9PSB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBzaWRlYmFyVHlwZSA9IElRU2V0dGluZy5vcHRpb25zLnNldHRpbmcuc2lkZWJhcl90eXBlLnZhbHVlXG4gICAgICBjb25zdCBuZXdUeXBlcyA9IHNpZGViYXJUeXBlXG4gICAgICBpZiAoc2lkZWJhclR5cGUuaW5jbHVkZXMoJ3NpZGViYXItbWluaScpKSB7XG4gICAgICAgIGNvbnN0IGluZGV4T2YgPSBuZXdUeXBlcy5maW5kSW5kZXgoKHgpID0+IHggPT0gJ3NpZGViYXItbWluaScpXG4gICAgICAgIG5ld1R5cGVzLnNwbGljZShpbmRleE9mLCAxKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VHlwZXMucHVzaCgnc2lkZWJhci1taW5pJylcbiAgICAgIH1cbiAgICAgIElRU2V0dGluZy5zaWRlYmFyX3R5cGUobmV3VHlwZXMpXG4gICAgfVxuICB9XG4gIGNvbnN0IHNpZGViYXJUb2dnbGUgPSAoZWxlbSkgPT4ge1xuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlYmFyJylcbiAgICAgIGlmIChzaWRlYmFyLmNsYXNzTGlzdC5jb250YWlucygnc2lkZWJhci1taW5pJykpIHtcbiAgICAgICAgc2lkZWJhci5jbGFzc0xpc3QucmVtb3ZlKCdzaWRlYmFyLW1pbmknKVxuICAgICAgICB1cGRhdGVTaWRlYmFyVHlwZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWRlYmFyLmNsYXNzTGlzdC5hZGQoJ3NpZGViYXItbWluaScpXG4gICAgICAgIHVwZGF0ZVNpZGViYXJUeXBlKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIGNvbnN0IHNpZGViYXJUb2dnbGVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGU9XCJzaWRlYmFyXCJdJylcbiAgQXJyYXkuZnJvbShzaWRlYmFyVG9nZ2xlQnRuLCAoc2lkZWJhckJ0bikgPT4ge1xuICAgIHNpZGViYXJUb2dnbGUoc2lkZWJhckJ0bilcbiAgfSlcblxuICAvKi0tLS0tLS0tLS0tLS0tLS1CYWNrIFRvIFRvcC0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgY29uc3QgYmFja1RvVG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2stdG8tdG9wJylcbiAgaWYgKGJhY2tUb1RvcCAhPT0gbnVsbCAmJiBiYWNrVG9Ub3AgIT09IHVuZGVmaW5lZCkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWNrLXRvLXRvcCcpLmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGVfX2FuaW1hdGVkJywgJ2FuaW1hdGVfX2ZhZGVPdXQnKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZSkgPT4ge1xuICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPiAyNTApIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2stdG8tdG9wJykuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZV9fZmFkZU91dCcpXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWNrLXRvLXRvcCcpLmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGVfX2ZhZGVJbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFjay10by10b3AnKS5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlX19mYWRlSW4nKVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFjay10by10b3AnKS5jbGFzc0xpc3QuYWRkKCdhbmltYXRlX19mYWRlT3V0JylcbiAgICAgIH1cbiAgICB9KVxuICAgIC8vIHNjcm9sbCBib2R5IHRvIDBweCBvbiBjbGlja1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b3AnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogMCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pXG4gICAgfSlcbiAgfVxuICAvKi0tLS0tLS0tLS0tLURPTUNvbnRlbnRMb2FkZWQtLS0tLS0tLS0tLS0tLSovXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoZXZlbnQpID0+IHtcbiAgICByZXNpemVQbHVnaW5zKClcbiAgICBsb2FkZXJJbml0KClcbiAgfSlcbiAgLyotLS0tLS0tLS0tLS1XaW5kb3cgUmVzaXplLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJlc2l6ZVBsdWdpbnMoKVxuICB9KVxuICAvKi0tLS0tLS0tRHJvcERvd24tLS0tLS0tLSovXG5cbiAgZnVuY3Rpb24gZGFya2VuX3NjcmVlbih5ZXNubykge1xuICAgIGlmICh5ZXNubyA9PSB0cnVlKSB7XG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjcmVlbi1kYXJrZW4nKSAhPT0gbnVsbCkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2NyZWVuLWRhcmtlbicpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh5ZXNubyA9PSBmYWxzZSkge1xuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY3JlZW4tZGFya2VuJykgIT09IG51bGwpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjcmVlbi1kYXJrZW4nKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjbG9zZV9vZmZjYW52YXMoKSB7XG4gICAgZGFya2VuX3NjcmVlbihmYWxzZSlcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vYmlsZS1vZmZjYW52YXMuc2hvdycpICE9PSBudWxsKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9iaWxlLW9mZmNhbnZhcy5zaG93JykuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpXG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ29mZmNhbnZhcy1hY3RpdmUnKVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzaG93X29mZmNhbnZhcyhvZmZjYW52YXNfaWQpIHtcbiAgICBkYXJrZW5fc2NyZWVuKHRydWUpXG4gICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9mZmNhbnZhc19pZCkgIT09IG51bGwpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9mZmNhbnZhc19pZCkuY2xhc3NMaXN0LmFkZCgnc2hvdycpXG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ29mZmNhbnZhcy1hY3RpdmUnKVxuICAgIH1cbiAgfVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRyaWdnZXJdJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlcnllbGVtZW50KSB7XG4gICAgICBsZXQgb2ZmY2FudmFzX2lkID0gZXZlcnllbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10cmlnZ2VyJylcbiAgICAgIGV2ZXJ5ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBzaG93X29mZmNhbnZhcyhvZmZjYW52YXNfaWQpXG4gICAgICB9KVxuICAgIH0pXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idG4tY2xvc2UnKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1jbG9zZScpLmZvckVhY2goZnVuY3Rpb24gKGV2ZXJ5YnV0dG9uKSB7XG4gICAgICAgIGV2ZXJ5YnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBjbG9zZV9vZmZjYW52YXMoKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY3JlZW4tZGFya2VuJykpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY3JlZW4tZGFya2VuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgY2xvc2Vfb2ZmY2FudmFzKClcbiAgICAgIH0pXG4gICAgfVxuICB9KVxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25hdmJhclNpZGVDb2xsYXBzZScpKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25hdmJhclNpZGVDb2xsYXBzZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm9mZmNhbnZhcy1jb2xsYXBzZScpLmNsYXNzTGlzdC50b2dnbGUoJ29wZW4nKVxuICAgIH0pXG4gIH1cbiAgY29uc3QgdG9nZ2xlZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYXZiYXJTdXBwb3J0ZWRDb250ZW50JylcbiAgY29uc3Qgb2ZmY2FudmFzaGVhZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29mZmNhbnZhc0JvdHRvbScpXG4gIGlmIChvZmZjYW52YXNoZWFkZXIgIT09IG51bGwgJiYgb2ZmY2FudmFzaGVhZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBic09mZmNhbnZhcyA9IG5ldyBib290c3RyYXAuT2ZmY2FudmFzKG9mZmNhbnZhc2hlYWRlcilcbiAgICB0b2dnbGVlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3Nob3cuYnMuY29sbGFwc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBic09mZmNhbnZhcy5zaG93KClcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vZmZjYW52YXMtYmFja2Ryb3AnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgdG9nZ2xlSW5zdGFjZSA9IGJvb3RzdHJhcC5Db2xsYXBzZS5nZXRJbnN0YW5jZSh0b2dnbGVlbGVtKVxuICAgICAgICB0b2dnbGVJbnN0YWNlLmhpZGUoKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRvZ2dsZWVsZW0uYWRkRXZlbnRMaXN0ZW5lcignaGlkZS5icy5jb2xsYXBzZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJzT2ZmY2FudmFzLmhpZGUoKVxuICAgIH0pXG4gIH1cbiAgLyotLS0tLS0tLS0tLS0tLS1Gb3JtIFZhbGlkYXRpb24tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIC8vIEV4YW1wbGUgc3RhcnRlciBKYXZhU2NyaXB0IGZvciBkaXNhYmxpbmcgZm9ybSBzdWJtaXNzaW9ucyBpZiB0aGVyZSBhcmUgaW52YWxpZCBmaWVsZHNcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgJ2xvYWQnLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEZldGNoIGFsbCB0aGUgZm9ybXMgd2Ugd2FudCB0byBhcHBseSBjdXN0b20gQm9vdHN0cmFwIHZhbGlkYXRpb24gc3R5bGVzIHRvXG4gICAgICB2YXIgZm9ybXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCduZWVkcy12YWxpZGF0aW9uJylcbiAgICAgIC8vIExvb3Agb3ZlciB0aGVtIGFuZCBwcmV2ZW50IHN1Ym1pc3Npb25cbiAgICAgIHZhciB2YWxpZGF0aW9uID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGZvcm1zLCBmdW5jdGlvbiAoZm9ybSkge1xuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgJ3N1Ym1pdCcsXG4gICAgICAgICAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZm9ybS5jaGVja1ZhbGlkaXR5KCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZCgnd2FzLXZhbGlkYXRlZCcpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApXG4gICAgICB9KVxuICAgIH0sXG4gICAgZmFsc2VcbiAgKVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuYnRuJywgZnVuY3Rpb24gKGUpIHtcbiAgICAkKHRoaXMpLnRyaWdnZXIoJ2JsdXInKVxuICB9KVxuICAvLyBTbmFja2JhciBNZXNzYWdlXG4gIGNvbnN0IHNuYWNrYmFyTWVzc2FnZSA9ICgpID0+IHtcbiAgICBjb25zdCBQUklNQVJZX0NPTE9SID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpKS5nZXRQcm9wZXJ0eVZhbHVlKCctLWJzLXN1Y2Nlc3MnKS50cmltKClcbiAgICBjb25zdCBEQU5HRVJfQ09MT1IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJykpLmdldFByb3BlcnR5VmFsdWUoJy0tYnMtZGFuZ2VyJykudHJpbSgpXG5cbiAgICBjb25zdCBzdWNjZXNzU25hY2tiYXIgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgU25hY2tiYXIuc2hvdyh7XG4gICAgICAgIHRleHQ6IG1lc3NhZ2UsXG4gICAgICAgIHBvczogJ2JvdHRvbS1sZWZ0JyxcbiAgICAgICAgYWN0aW9uVGV4dENvbG9yOiBQUklNQVJZX0NPTE9SLFxuICAgICAgICBkdXJhdGlvbjogMjUwMFxuICAgICAgfSlcbiAgICB9XG4gICAgd2luZG93LnN1Y2Nlc3NTbmFja2JhciA9IHN1Y2Nlc3NTbmFja2JhclxuXG4gICAgY29uc3QgZXJyb3JTbmFja2JhciA9IChtZXNzYWdlKSA9PiB7XG4gICAgICBTbmFja2Jhci5zaG93KHtcbiAgICAgICAgdGV4dDogbWVzc2FnZSxcbiAgICAgICAgcG9zOiAnYm90dG9tLWxlZnQnLFxuICAgICAgICBhY3Rpb25UZXh0Q29sb3I6ICcjRkZGRkZGJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBEQU5HRVJfQ09MT1IsXG4gICAgICAgIGR1cmF0aW9uOiAyNTAwXG4gICAgICB9KVxuICAgIH1cbiAgICB3aW5kb3cuZXJyb3JTbmFja2JhciA9IGVycm9yU25hY2tiYXJcbiAgfVxuICBzbmFja2Jhck1lc3NhZ2UoKVxuXG4gIC8qXG4gICAgRXhlbXBsZXMgOlxuICAgIDxhIGhyZWY9XCJwb3N0cy8yXCIgZGF0YS1tZXRob2Q9XCJkZWxldGVcIiBkYXRhLXRva2VuPVwie3tjc3JmX3Rva2VuKCl9fVwiPlxuICAgIC0gT3IsIHJlcXVlc3QgY29uZmlybWF0aW9uIGluIHRoZSBwcm9jZXNzIC1cbiAgICA8YSBocmVmPVwicG9zdHMvMlwiIGRhdGEtbWV0aG9kPVwiZGVsZXRlXCIgZGF0YS10b2tlbj1cInt7Y3NyZl90b2tlbigpfX1cIiBkYXRhLWNvbmZpcm09XCJBcmUgeW91IHN1cmU/XCI+XG4gICAgKi9cblxuICB3aW5kb3cubGFyYXZlbCA9IHtcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1ldGhvZExpbmtzID0gJCgnW2RhdGEtbWV0aG9kXScpXG4gICAgICB0aGlzLnRva2VuID0gJCgnW2RhdGEtdG9rZW5dJylcbiAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKVxuICAgICAgd2luZG93LnRvb2x0aXBJbml0KClcbiAgICAgIGlmICgkKCcjcXVpY2stYWN0aW9uLXR5cGUnKS52YWwoKSA9PSAnJykge1xuICAgICAgICAkKCcjcXVpY2stYWN0aW9uLWFwcGx5JykuYXR0cignZGlzYWJsZWQnLCB0cnVlKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZWdpc3RlckV2ZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tZXRob2RMaW5rcy5vbignY2xpY2snLCB0aGlzLmhhbmRsZU1ldGhvZClcbiAgICB9LFxuXG4gICAgYWpheFN1Ym1pdEZvcm06IGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBVUkwgPSAkKHRoaXMpLmF0dHIoJ2FjdGlvbicpXG4gICAgICBjb25zdCBEQVRBID0gJCh0aGlzKS5zZXJpYWxpemUoKVxuICAgICAgY29uc3QgX190aGlzID0gJCh0aGlzKVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAkLmFqYXgoe1xuICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgIHVybDogVVJMLFxuICAgICAgICBkYXRhOiBEQVRBLFxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICAgIC8vIHdpbmRvdy5zdWNjZXNzU25hY2tiYXIocmVzLm1lc3NhZ2UpXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xuICAgICAgICAgICAgICB0aXRsZTogJ0RlbGV0ZWQnLFxuICAgICAgICAgICAgICB0ZXh0OiByZXMubWVzc2FnZSxcbiAgICAgICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICBzaG93Q2xhc3M6IHtcbiAgICAgICAgICAgICAgICBwb3B1cDogJ2FuaW1hdGVfX2FuaW1hdGVkIGFuaW1hdGVfX3pvb21JbidcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaGlkZUNsYXNzOiB7XG4gICAgICAgICAgICAgICAgcG9wdXA6ICdhbmltYXRlX19hbmltYXRlZCBhbmltYXRlX196b29tT3V0J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmVuZGVyZWREYXRhVGFibGUuYWpheC5yZWxvYWQobnVsbCwgZmFsc2UpXG4gICAgICAgICAgICBfX3RoaXMucmVtb3ZlKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlcy5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgICAgICAgICAgICAgdGV4dDogcmVzLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBzaG93Q2xhc3M6IHtcbiAgICAgICAgICAgICAgICAgIHBvcHVwOiAnYW5pbWF0ZV9fYW5pbWF0ZWQgYW5pbWF0ZV9fem9vbUluJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGlkZUNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICBwb3B1cDogJ2FuaW1hdGVfX2FuaW1hdGVkIGFuaW1hdGVfX3pvb21PdXQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBfX3RoaXMucmVtb3ZlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSBlcnIucmVzcG9uc2VUZXh0XG4gICAgICAgICAgU3dhbC5maXJlKHtcbiAgICAgICAgICAgIHRpdGxlOiBlcnIuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgIHRleHQ6IHdyYXBwZXIuaW5uZXJIVE1MLFxuICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcbiAgICAgICAgICAgIHNob3dDbGFzczoge1xuICAgICAgICAgICAgICBwb3B1cDogJ2FuaW1hdGVfX2FuaW1hdGVkIGFuaW1hdGVfX3pvb21JbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoaWRlQ2xhc3M6IHtcbiAgICAgICAgICAgICAgcG9wdXA6ICdhbmltYXRlX19hbmltYXRlZCBhbmltYXRlX196b29tT3V0J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgX190aGlzLnJlbW92ZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcblxuICAgIGhhbmRsZU1ldGhvZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgdmFyIGxpbmsgPSAkKHRoaXMpXG4gICAgICB2YXIgaHR0cE1ldGhvZCA9IGxpbmsuZGF0YSgnbWV0aG9kJykudG9VcHBlckNhc2UoKVxuICAgICAgdmFyIGZvcm1cblxuICAgICAgLy8gSWYgdGhlIGRhdGEtbWV0aG9kIGF0dHJpYnV0ZSBpcyBub3QgUFVULCBQQVRDSCBvciBERUxFVEUsXG4gICAgICAvLyBUaGVuIHdlIGRvbid0IGtub3cgd2hhdCB0byBkby4gSnVzdCBpZ25vcmUuXG4gICAgICBpZiAoJC5pbkFycmF5KGh0dHBNZXRob2QsIFsnUFVUJywgJ0RFTEVURScsICdQQVRDSCddKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIEFsbG93IHVzZXIgdG8gb3B0aW9uYWxseSBwcm92aWRlIGRhdGEtY29uZmlybT1cIkFyZSB5b3Ugc3VyZT9cIlxuICAgICAgaWYgKGxpbmsuZGF0YSgnY29uZmlybScpKSB7XG4gICAgICAgIGxhcmF2ZWwudmVyaWZ5Q29uZmlybShsaW5rKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBpZiAocmVzLmlzQ29uZmlybWVkKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtSUQgPSAnZm9ybS0nICsgbGluay5hdHRyKCdpZCcpXG4gICAgICAgICAgICBmb3JtID0gbGFyYXZlbC5jcmVhdGVGb3JtKGxpbmssIGZvcm1JRClcbiAgICAgICAgICAgIGlmIChsaW5rLmRhdGEoJ3R5cGUnKSA9PSAnYWpheCcpIHtcbiAgICAgICAgICAgICAgJCgnIycgKyBmb3JtSUQpLm9uKCdzdWJtaXQnLCBsYXJhdmVsLmFqYXhTdWJtaXRGb3JtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybS5zdWJtaXQoKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIHZlcmlmeUNvbmZpcm06IGFzeW5jIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICByZXR1cm4gYXdhaXQgU3dhbC5maXJlKHtcbiAgICAgICAgdGl0bGU6IGxpbmsuZGF0YSgnY29uZmlybScpLFxuICAgICAgICBpY29uOiAncXVlc3Rpb24nLFxuICAgICAgICAvLyBpY29uQ29sb3I6J3ByaW1hcnknLFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjZDMzJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjODU4NDgyJyxcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIGRlbGV0ZSBpdCEnLFxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnQ2FuY2VsJyxcbiAgICAgICAgc2hvd0NsYXNzOiB7XG4gICAgICAgICAgcG9wdXA6ICdhbmltYXRlX19hbmltYXRlZCBhbmltYXRlX196b29tSW4nXG4gICAgICAgIH0sXG4gICAgICAgIGhpZGVDbGFzczoge1xuICAgICAgICAgIHBvcHVwOiAnYW5pbWF0ZV9fYW5pbWF0ZWQgYW5pbWF0ZV9fem9vbU91dCdcbiAgICAgICAgfSxcbiAgICAgICAgcmV2ZXJzZUJ1dHRvbnM6IHRydWVcbiAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICBjcmVhdGVGb3JtOiBmdW5jdGlvbiAobGluaywgZm9ybUlEKSB7XG4gICAgICB2YXIgZm9ybSA9ICQoJzxmb3JtPicsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGlkOiBmb3JtSUQsXG4gICAgICAgIGFjdGlvbjogbGluay5hdHRyKCdocmVmJylcbiAgICAgIH0pXG5cbiAgICAgIHZhciB0b2tlbiA9ICQoJzxpbnB1dD4nLCB7XG4gICAgICAgIHR5cGU6ICdoaWRkZW4nLFxuICAgICAgICBuYW1lOiAnX3Rva2VuJyxcbiAgICAgICAgdmFsdWU6IGxpbmsuZGF0YSgndG9rZW4nKVxuICAgICAgfSlcblxuICAgICAgdmFyIGhpZGRlbklucHV0ID0gJCgnPGlucHV0PicsIHtcbiAgICAgICAgbmFtZTogJ19tZXRob2QnLFxuICAgICAgICB0eXBlOiAnaGlkZGVuJyxcbiAgICAgICAgdmFsdWU6IGxpbmsuZGF0YSgnbWV0aG9kJylcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBmb3JtLmFwcGVuZCh0b2tlbiwgaGlkZGVuSW5wdXQpLmFwcGVuZFRvKCdib2R5JylcbiAgICB9XG4gIH1cbn0pKClcbiJdLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9uZXh0IiwiX3Rocm93IiwibG9hZGVySW5pdCIsImxvYWRlciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCIkIiwiZm4iLCJzZWxlY3QyIiwidW5kZWZpbmVkIiwidGFncyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ5T2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwibmF2YmFyIiwicmVtb3ZlIiwicG9wb3ZlclRyaWdnZXJMaXN0IiwicXVlcnlTZWxlY3RvckFsbCIsImJvb3RzdHJhcCIsIm1hcCIsInBvcG92ZXJUcmlnZ2VyRWwiLCJQb3BvdmVyIiwidG9vbHRpcEluaXQiLCJ0b29sdGlwVHJpZ2dlckxpc3QiLCJ0b29sdGlwVHJpZ2dlckVsIiwiVG9vbHRpcCIsInNpZGViYXJUb29sdGlwVHJpZ2dlckxpc3QiLCJwcm9ncmVzc0JhckluaXQiLCJlbGVtIiwiY3VycmVudFZhbHVlIiwiZ2V0QXR0cmlidXRlIiwic3R5bGUiLCJ3aWR0aCIsInRyYW5zaXRpb24iLCJXYXlwb2ludCIsImVsZW1lbnQiLCJoYW5kbGVyIiwib2Zmc2V0IiwiY3VzdG9tUHJvZ3Jlc3NCYXIiLCJBcnJheSIsImZyb20iLCJjcmVhdGVTbGlkZXIiLCJub1VpU2xpZGVyIiwic3RhcnQiLCJjb25uZWN0IiwicmFuZ2UiLCJtaW4iLCJtYXgiLCJyYW5nZVNsaWRlciIsInNsaWRlciIsImNvcHkiLCJ0YXJnZXQiLCJjb250YWluZXIiLCJpbm5lckhUTUwiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJzZWxlY3QiLCJleGVjQ29tbWFuZCIsInNldEF0dHJpYnV0ZSIsImJ0bl90b29sdGlwIiwiZ2V0SW5zdGFuY2UiLCJzaG93IiwiaGlkZSIsInBsdXNCdG5zIiwibWludXNCdG5zIiwidXBkYXRlUXR5QnRuIiwib2xkVmFsdWUiLCJjbG9zZXN0IiwibmV3VmFsdWUiLCJOdW1iZXIiLCJkYXRlX2ZsYXRwaWNrciIsImZsYXRwaWNrciIsIm1pbkRhdGUiLCJkYXRlRm9ybWF0IiwicmFuZ2VfZmxhdHBpY2tlciIsIm1vZGUiLCJ3cmFwX2ZsYXRwaWNrZXIiLCJ0aW1lX2ZsYXRwaWNrciIsImVuYWJsZVRpbWUiLCJub0NhbGVuZGFyIiwiaW5saW5lX2ZsYXRwaWNrciIsImlubGluZSIsImNvdW50ZXJVcCIsImNvdW50ZXJVcDIiLCJlbCIsIndheXBvaW50IiwiZHVyYXRpb24iLCJkZWxheSIsImRlc3Ryb3kiLCJTbGlkZXJUYWIiLCJTY3JvbGxiYXIiLCJpbml0IiwiY29udGludW91c1Njcm9sbGluZyIsImFsd2F5c1Nob3dUcmFja3MiLCJEYXRhVGFibGUiLCJhdXRvV2lkdGgiLCJkb20iLCJoaWRkZW50YWJsZSIsIm9uIiwicHJldmVudERlZmF1bHQiLCJjb2x1bW4iLCJhdHRyIiwidmlzaWJsZSIsImVhY2giLCJ0aXRsZSIsImh0bWwiLCJjb25jYXQiLCJpbml0Q29tcGxldGUiLCJhcGkiLCJjb2x1bW5zIiwiZXZlcnkiLCJ0aGF0IiwiZm9vdGVyIiwic2VhcmNoIiwiZHJhdyIsImxhbmd1YWdlU2VsZWN0Iiwib3B0aW9ucyIsImZpbHRlciIsIm9wdGlvbiIsInNlbGVjdGVkIiwiZGF0YVRhYmxlSW5pdCIsImxhbmd1YWdlIiwidXJsIiwiZGF0YVRhYmxlIiwiZm5EZXN0cm95IiwidGFibGVUaCIsInRhYmxlVGQiLCJ0aCIsImNoaWxkcmVuIiwidGQiLCJjb2wiLCJpbmRleE9mIiwidGRJY29ucyIsInBhcnNlSW50IiwicmVzaXplUGx1Z2lucyIsInRhYnMiLCJzaWRlYmFyUmVzcG9uc2l2ZSIsImlubmVyV2lkdGgiLCJjb250YWlucyIsInVwZGF0ZVNpZGViYXJUeXBlIiwiSVFTZXR0aW5nIiwic2lkZWJhclR5cGUiLCJzZXR0aW5nIiwic2lkZWJhcl90eXBlIiwibmV3VHlwZXMiLCJpbmNsdWRlcyIsImZpbmRJbmRleCIsIngiLCJzcGxpY2UiLCJzaWRlYmFyVG9nZ2xlIiwic2lkZWJhciIsInNpZGViYXJUb2dnbGVCdG4iLCJzaWRlYmFyQnRuIiwiYmFja1RvVG9wIiwiZ2V0RWxlbWVudEJ5SWQiLCJzY3JvbGxUbyIsInRvcCIsImJlaGF2aW9yIiwiZXZlbnQiLCJkYXJrZW5fc2NyZWVuIiwieWVzbm8iLCJjbG9zZV9vZmZjYW52YXMiLCJib2R5Iiwic2hvd19vZmZjYW52YXMiLCJvZmZjYW52YXNfaWQiLCJldmVyeWVsZW1lbnQiLCJldmVyeWJ1dHRvbiIsInRvZ2dsZSIsInRvZ2dsZWVsZW0iLCJvZmZjYW52YXNoZWFkZXIiLCJic09mZmNhbnZhcyIsIk9mZmNhbnZhcyIsInRvZ2dsZUluc3RhY2UiLCJDb2xsYXBzZSIsImZvcm1zIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInZhbGlkYXRpb24iLCJmb3JtIiwiY2hlY2tWYWxpZGl0eSIsInN0b3BQcm9wYWdhdGlvbiIsInRyaWdnZXIiLCJzbmFja2Jhck1lc3NhZ2UiLCJQUklNQVJZX0NPTE9SIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJ0cmltIiwiREFOR0VSX0NPTE9SIiwic3VjY2Vzc1NuYWNrYmFyIiwibWVzc2FnZSIsIlNuYWNrYmFyIiwidGV4dCIsInBvcyIsImFjdGlvblRleHRDb2xvciIsImVycm9yU25hY2tiYXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJsYXJhdmVsIiwiaW5pdGlhbGl6ZSIsIm1ldGhvZExpbmtzIiwidG9rZW4iLCJyZWdpc3RlckV2ZW50cyIsInZhbCIsImhhbmRsZU1ldGhvZCIsImFqYXhTdWJtaXRGb3JtIiwiVVJMIiwiREFUQSIsInNlcmlhbGl6ZSIsIl9fdGhpcyIsImFqYXgiLCJkYXRhIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwicmVzIiwic3RhdHVzIiwiU3dhbCIsImZpcmUiLCJpY29uIiwic2hvd0NsYXNzIiwicG9wdXAiLCJoaWRlQ2xhc3MiLCJyZW5kZXJlZERhdGFUYWJsZSIsInJlbG9hZCIsImVycm9yIiwiZXJyIiwid3JhcHBlciIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJsaW5rIiwiaHR0cE1ldGhvZCIsInRvVXBwZXJDYXNlIiwiaW5BcnJheSIsInZlcmlmeUNvbmZpcm0iLCJpc0NvbmZpcm1lZCIsImZvcm1JRCIsImNyZWF0ZUZvcm0iLCJzdWJtaXQiLCJfdmVyaWZ5Q29uZmlybSIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0Iiwic2hvd0NhbmNlbEJ1dHRvbiIsImNvbmZpcm1CdXR0b25Db2xvciIsImNhbmNlbEJ1dHRvbkNvbG9yIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0IiwicmV2ZXJzZUJ1dHRvbnMiLCJyZXN1bHQiLCJfeCIsImlkIiwiYWN0aW9uIiwiaGlkZGVuSW5wdXQiLCJhcHBlbmQiLCJhcHBlbmRUbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/backend-custom.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/backend-custom.js"]();
/******/ 	
/******/ })()
;